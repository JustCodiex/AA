#include "AAVM.h"
#include "AAB2F.h"
#include "stack.h"

AAVM* AANewVM() {
	return new AAVM;
}

AAVM::AAVM() {

	m_compiler = new AAC;
	m_parser = new AAP;
	m_outStream = 0;

}

void AAVM::Release() {

	// Delete compiler
	delete m_compiler;
	m_compiler = 0;

	// Delete parser
	m_parser->Release();
	delete m_parser;
	m_parser = 0;

}

AAC_Out AAVM::CompileExpressionToFile(std::wstring input, std::wstring outputfile) {

	// Generated AST from input
	AA_AST* tree = m_parser->Parse(input);

	// Generated bytecode
	AAC_Out bytecode = m_compiler->CompileFromAST(tree);

	// Dump bytecode
	aa::dump_bytecode(outputfile, bytecode);

	// Aslo return bytecode (so we can execute it directly)
	return bytecode;

}

AAC_Out AAVM::CompileFileToFile(std::wstring fileIn, std::wstring fileOut) { // TODO: Implement

	// Generated AST from input
	AA_AST* tree = m_parser->Parse(L"");

	// Generated bytecode
	AAC_Out bytecode = m_compiler->CompileFromAST(tree);

	return bytecode;

}

void AAVM::RunFile(std::wstring file) {



}

void AAVM::RunExpression(std::wstring input) {

	// Generated AST from input
	AA_AST* tree = m_parser->Parse(input);

	// Generated bytecode
	AAC_Out bytecode = m_compiler->CompileFromAST(tree);

	// Execute the bytecode
	Execute(bytecode.bytes, bytecode.length);

}

void AAVM::Execute(AAC_Out bytecode) {
	this->Execute(bytecode.bytes, bytecode.length);
}

void AAVM::Execute(unsigned char* bytes, unsigned long long len) {

	// The operation count
	int opCount;

	// Operation list and constants table
	AAO* ops = 0; AA_Literal* constants = 0;

	// Create the execution environment
	CreateExecutionEnvironment(bytes, len, constants, ops, opCount);

	// Run
	Run(constants, ops, opCount);

}

void AAVM::Run(AA_Literal* lit, AAO* ops, int opCount) {

	int opPointer = 0;
	aa::stack<AA_Literal> stack;

	while (opPointer < opCount) {

		switch (ops[opPointer].op) {
		case AAByteCode::PUSHC:
			stack.Push(lit[ops[opPointer].args[0]]);
			opPointer++;
			break;
		case AAByteCode::ADD: {
			AA_Literal rhs = stack.Pop();
			AA_Literal lhs = stack.Pop();
			AA_Literal r = lhs + rhs;
			stack.Push(r);
			opPointer++;
			break;
		}
		case AAByteCode::SUB: {
			AA_Literal rhs = stack.Pop();
			AA_Literal lhs = stack.Pop();
			AA_Literal r = lhs - rhs;
			stack.Push(r);
			opPointer++;
			break;
		}
		case AAByteCode::MUL: {
			AA_Literal rhs = stack.Pop();
			AA_Literal lhs = stack.Pop();
			AA_Literal r = lhs * rhs;
			stack.Push(r);
			opPointer++;
			break;
		}
		case AAByteCode::DIV: {
			AA_Literal rhs = stack.Pop();
			AA_Literal lhs = stack.Pop();
			stack.Push(lhs / rhs);
			opPointer++;
			break;
		}
		case AAByteCode::MOD: {
			AA_Literal rhs = stack.Pop();
			AA_Literal lhs = stack.Pop();
			stack.Push(lhs % rhs);
			opPointer++;
			break;
		}
		case AAByteCode::NNEG: {
			stack.Push(-stack.Pop());
			opPointer++;
			break;
		}
		case AAByteCode::NOP:
		default:
			opPointer++;
			break;
		}

	}

	if (stack.Size() == 1) {
		if (m_outStream) {
			m_outStream->operator<<(stack.Pop().lit.i.val);
			m_outStream->write("\n", 1);
		}
	}

}

void AAVM::CreateExecutionEnvironment(unsigned char* bytes, unsigned long long len, AA_Literal*& constants, AAO*& oplist, int& opCount) {

	unsigned int opOffset;
	constants = LoadConstsTable(bytes, len, opOffset);
	oplist = LoadOpSequence(bytes + opOffset, len, opCount);

}

AA_Literal* AAVM::LoadConstsTable(unsigned char* bytes, unsigned long long len, unsigned int& offset) {

	int count = 0;
	memcpy(&count, bytes, 4);

	offset = 4;
	AA_Literal* table = new AA_Literal[count];

	for (int i = 0; i < count; i++) {

		unsigned char type;
		memcpy(&type, bytes + offset, 1);

		offset++;
		table[i].tp = (AALiteralType)type;

		switch (table[i].tp) {
		case AALiteralType::Int:
			memcpy(&table[i].lit.i.val, bytes + offset, 4);
			offset += 4;
			break;
		case AALiteralType::String:
			break;
		case AALiteralType::Float:
			break;
		case AALiteralType::Boolean:
			break;
		default:
			break;
		}

	}

	return table;

}

AAO* AAVM::LoadOpSequence(unsigned char* bytes, unsigned long long len, int& count) {

	unsigned long long offset = 0;

	count = 0;
	memcpy(&count, bytes, 4);
	offset += 4;

	AAO* opSequence = new AAO[count];

	for (int i = 0; i < count; i++) {

		unsigned char opchar;
		memcpy(&opchar, bytes + offset, 1);
		offset += 1;

		opSequence[i].op = (AAByteCode)opchar;

		switch (opSequence[i].op) {
		case AAByteCode::PUSHC:
			opSequence[i].args = new int[1];
			memcpy(opSequence[i].args, bytes + offset, 4);
			offset += 4;
			break;
		case AAByteCode::NOP:
		case AAByteCode::ADD:
		case AAByteCode::SUB:
		case AAByteCode::MOD:
		case AAByteCode::MUL:
		case AAByteCode::DIV:
		case AAByteCode::NNEG:
			opSequence[i].args = 0;
			break;
		default:
			break;
		}

	}

	return opSequence;

}
