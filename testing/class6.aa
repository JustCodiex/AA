// Super class
class Super {

    // Super .ctor
    Super() {
        println("Super .ctor called");
    }

    // Virtual function (can be overriden)
    virtual void print() {
        println("Super -> print"); // <-- We don't expect this to be called
    }

};

// Sub class (it inherits from Super)
class Sub : Super {

    // .ctor for Sub (Which will implicitly call Super::.ctor first)
    Sub() {
        println("Sub .ctor called");
    }

    // Override the print function we were given
    override void print() {
        println("Sub -> print"); // <-- This is one we expect to be called
    }

};

// Our main function
int main() {

    // Create a new sub object and store it in a variable for a Super object
    Super instance = new Sub();
    instance.print(); // Call print function (Should call Sub::print)

    // Return 0
    0;

};

// Call the main function
main();
